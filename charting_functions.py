#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Aug 17 14:10:58 2019

To close all charts generated by matplotlib:
    
    from matplotlib.pyplot import close
    close('all')

@author: philipa
"""
from matplotlib.pyplot import close
# close('all')
dim = 7.2
def chart_histogram(values,chart_title='',xmin=None,xmax=None,binsize=1,pdf=None,iplot=None,x_label=None,y_label=None,font_size=10):
    """Generates a histogram of values after flattening. The charted range spans
    from xmin to xmax and binned according to binsize. The vertical axis is
    plotted on a log scale. If values beyond the range exist, a red circle
    indicates the number of values found in excess of the defined range. Pixels
    containing inf or nan are reset to zero."""
    from matplotlib.pyplot import figure,title,show,grid,hist,plot,ylim,xlabel,ylabel
    from numpy import isnan,inf,nan_to_num
    from matplotlib import rcParams
    rcParams.update({'font.size': font_size})
    I = nan_to_num(values,nan=0.0,posinf=0,neginf=0)
    # I = values.copy()
    # I[isnan(I)] = 0
    # I[I == inf] = 0
    # I[I == -inf] = 0
    # if xmin is None:
    #     xmin = I.min()
    # if xmax is None:
    #     xmax = I.max()
    chart = figure(figsize=(7.2, 7.2),constrained_layout=True)
    # N_zeros = (I == 0).sum()
    title(chart_title)# + '\n({} zero pixels)'.format(N_zeros))
    I_flat = I.flatten()
    N_above = (I > xmax+0.5*binsize).sum()
    N_below = (I < xmin-0.5*binsize).sum()
    N_bins = int((xmax-xmin)/binsize+1)
    hist(I_flat,N_bins,range=(xmin-0.5*binsize,xmax+0.5*binsize),log=True)
    plot(xmax,N_above,'ro')
    plot(xmin,N_below,'ro')
    ylim(0.1)
    grid(True)
    if x_label != None:
        xlabel(x_label)
    if y_label != None:
        ylabel(y_label)
    if iplot: show(block=False)
    if pdf is not None: pdf.savefig(chart)

def chart_xyz_scatter(x,y,z,s=3,chart_title='',iplot=None):
    import matplotlib.pyplot as plt
    from matplotlib.pyplot import title,show
    from mpl_toolkits.mplot3d import Axes3D
    fig = plt.figure()
    ax = fig.add_subplot(projection='3d')
    title(chart_title)
    ax.scatter(x,y,z,s=s)
    if iplot: show(block=False)    

def chart_xy_scatter_annotate(x,y,psi,label=None,chart_title='',logy=False,logx=False,xmin=None,xmax=None,ymin=None,ymax=None,pdf=None,iplot=None,yrev=False,x_label=None,y_label=None):
    """Scatter plot of y vs. x with size s=4, color = psi, and label if not None."""
    from matplotlib.pyplot import figure,title,show,grid,scatter,cm,colorbar,xlim,ylim,yscale,xscale,xlabel,ylabel,annotate
    from numpy import pi
    dim=7.2
    if yrev:
        aspect = ymax/xmax
        chart = figure(figsize=(dim,dim*aspect),constrained_layout=True)
    else:
        chart = figure(figsize=(dim, dim),constrained_layout=True)
    title(chart_title)
    scatter(x.flatten(),y.flatten(),s=4,c=psi.flatten()/pi,cmap=cm.jet)
    if not (label == None).any():
        text = label.astype(str)
        x = x.flatten()
        y = y.flatten()
        for i in range(len(text)): 
            annotate(text[i],(x[i],y[i]),size='x-small',alpha=0.5)
    colorbar(orientation = 'vertical', pad = 0.0)
    if logy: yscale('log')
    if logx: xscale('log')
    if yrev:
        ylim(ymax,ymin)
    else:
        ylim(ymin,ymax) 
    xlim(xmin,xmax)
    if x_label != None:
        xlabel(x_label)
    if y_label != None:
        ylabel(y_label)
    grid(True)
    if iplot: show(block=False)
    if pdf is not None: pdf.savefig(chart)
    
def chart_xy_scatter(x,y,psi,chart_title='',logy=False,logx=False,xmin=None,xmax=None,ymin=None,ymax=None,pdf=None,iplot=None,yrev=False,x_label=None,y_label=None,ms=1,legend_labels=None,font_size=10):
    """Scatter plot of y vs. x with size s=4 and color = psi."""
    from matplotlib.pyplot import figure,title,show,grid,scatter,cm,colorbar,xlim,ylim,yscale,xscale,xlabel,ylabel
    from numpy import pi
    from matplotlib import rcParams
    rcParams.update({'font.size': font_size})
    dim=7.2
    if yrev:
        aspect = ymax/xmax
        chart = figure(figsize=(dim,dim*aspect),constrained_layout=True)
    else:
        chart = figure(figsize=(dim, dim),constrained_layout=True)
    title(chart_title)
    scatter(x.flatten(),y.flatten(),s=ms,c=psi.flatten(),cmap=cm.jet)
    #scatter(x.flatten(),y.flatten(),s=4,c=psi.flatten()/pi,cmap=cm.jet)
    colorbar(orientation = 'vertical', pad = 0.0)
    if logy: yscale('log')
    if logx: xscale('log')
    if yrev:
        ylim(ymax,ymin)
    else:
        ylim(ymin,ymax) 
    xlim(xmin,xmax)
    if x_label != None:
        xlabel(x_label)
    if y_label != None:
        ylabel(y_label)
    grid(True)
    if iplot: show(block=False)
    if pdf is not None: pdf.savefig(chart)

def chart_xy_series(x,y,chart_title='',x_label=None,xmin=None,xmax=None,y_label = None,logy=False,ymin=None,ymax=None,pdf=None,iplot=None):
    """Plots y (as list) vs. x."""
    from matplotlib.pyplot import figure,title,plot,show,grid,yscale,ylim,legend,xlabel,ylabel,xlim
    from numpy import arange
    chart = figure(figsize=(7.2, 7.2),constrained_layout=True)
    title(chart_title)
    for yi in y:
        plot(x,yi)
    if logy: yscale('log')
    ylim(ymin,ymax) 
    grid(True)
    xlim(xmin,xmax) 
    if x_label != None:
        xlabel(x_label)
    if y_label != None:
        ylabel(y_label)
    if len(y)>1: legend(arange(len(y)))
    if iplot: show(block=False)
    if pdf is not None: pdf.savefig(chart)
    
def chart_xy_symbol(x,y,chart_title='',ms=1,logx=False,logy=False,xmin=None,xmax=None,ymin=None,ymax=None,x_label=None,y_label=None,pdf=None,iplot=None,yrev=False,legend_labels=None,font_size=10,line=None):
    """Plots y vs. x using circles of size ms=1."""
    from matplotlib.pyplot import figure,title,plot,show,grid,yscale,xscale,ylim,xlim,xlabel,ylabel,legend
    from matplotlib import rcParams
    from cycler import cycler
    rcParams['axes.prop_cycle'] = cycler(color='bgrcmyk')
    rcParams.update({'font.size': font_size})
    from numpy import arange
    dim=7.2
    if yrev:
        aspect = ymax/xmax
        chart = figure(figsize=(dim,dim*aspect),constrained_layout=True)
    else:
        chart = figure(figsize=(dim, dim),constrained_layout=True)
    title(chart_title)
    if line:
        plot(x,y.T,'-o',ms=ms)
    else:
        plot(x,y.T,'o',ms=ms)
    if logy: yscale('log')
    if logx: xscale('log')
    if yrev:
        ylim(ymax,ymin)
    else:
        ylim(ymin,ymax) 
    xlim(xmin,xmax) 
    xlabel(x_label)
    ylabel(y_label)
    grid(True)
    if len(y)>1: 
        if legend_labels==None:
            if len(y) < 10:
                legend(arange(len(y)))
        else:
            legend(legend_labels)
    if iplot: show(block=False)
    if pdf is not None: pdf.savefig(chart)
 
def chart_xy_fit(x,y,yfit,chart_title='',ms=2,logx=False,logy=False,xmin=None,xmax=None,ymin=None,ymax=None,x_label=None,y_label=None,pdf=None,iplot=None,yrev=False,legend_labels=None,font_size=10):
    """Plots y and yfit vs. x using circles of size ms=2."""
    from matplotlib.pyplot import figure,title,plot,show,grid,yscale,xscale,ylim,xlim,xlabel,ylabel,legend
    from numpy import arange
    import matplotlib.pyplot as plt
    from matplotlib import rcParams
    rcParams.update({'font.size': font_size})
    dim=7.2
    if yrev:
        aspect = ymax/xmax
        chart = figure(figsize=(dim,dim*aspect),constrained_layout=True)
    else:
        chart = figure(figsize=(dim, dim),constrained_layout=True)
    title(chart_title)
    plot(x,y.T,'o',ms=ms)
    plt.gca().set_prop_cycle(None)
    plot(x,yfit.T,'r-')
    if logy: yscale('log')
    if logx: xscale('log')
    if yrev:
        ylim(ymax,ymin)
    else:
        ylim(ymin,ymax) 
    xlim(xmin,xmax) 
    xlabel(x_label)
    ylabel(y_label)
    if legend_labels==None:
        if len(y) < 10:
            legend(arange(len(y)))
    else:
        legend(legend_labels)
    grid(True)
    if iplot: show(block=False)
    if pdf is not None: pdf.savefig(chart)

def chart_vector(I,chart_title='',logy=False,logx=False,ymin=None,ymax=None,x_label=None,y_label=None,legend_show=True,pdf=None,iplot=None,legend_labels=None,font_size=10):
    from matplotlib.pyplot import figure,title,plot,show,grid,yscale,xscale,ylim,xlabel,ylabel,legend
    from numpy import arange
    from matplotlib import rcParams
    rcParams.update({'font.size': font_size})
    chart = figure(figsize=(7.2, 7.2),constrained_layout=True)
    title(chart_title)
    plot(I.T)
    if logy: yscale('log')
    if logx: xscale('log')
    ylim(ymin,ymax) 
    grid(True)
    xlabel(x_label)
    ylabel(y_label)
    if legend_show: 
        if legend_labels==None:
            if len(I) < 10:
                legend(arange(len(I)))
        else:
            legend(legend_labels)
    if iplot: show(block=False)
    if pdf is not None: pdf.savefig(chart)

def chart_vectors(I,chart_title='',logy=False,logx=False,ymin=None,ymax=None,x_label=None,y_label=None,legend_show=True,rainbow=False,pdf=None,iplot=None):
    """Charts list of vectors."""
    from matplotlib.pyplot import figure,title,plot,show,grid,ylim,legend,yscale,xscale,xlabel,ylabel
    import matplotlib.cm as cm
    from numpy import arange,linspace
    chart = figure(figsize=(7.2, 7.2),constrained_layout=True)
    title(chart_title)
    if rainbow:
        colors = cm.rainbow(linspace(0, 1, len(I)))
        i=0
        for series in I:
            plot(series,color = colors[i])
            i += 1
    else:
        for series in I:
            plot(series)

    if logy: yscale('log')
    if logx: xscale('log')
    ylim(ymin,ymax)
    xlabel(x_label)
    ylabel(y_label)
    if legend_show: legend(arange(len(I)))
    grid(True)
    if iplot: show(block=False)
    if pdf is not None: pdf.savefig(chart)

def chart_xy_rainbow(x,y,chart_title='',logy=False,logx=False,ymin=None,ymax=None,xmin=None,xmax=None,x_label=None,y_label=None,legend_show=False,pdf=None,iplot=None,reverse_order=True,legend_labels=None,font_size=18):
    """Charts yi vs. x with rainbow colors for each i."""
    from matplotlib.pyplot import figure,title,plot,show,grid,ylim,xlim,legend,yscale,xscale,xlabel,ylabel
    import matplotlib.cm as cm
    from matplotlib import rcParams
    rcParams.update({'font.size': font_size})
    from numpy import arange,linspace,array
    chart = figure(figsize=(7.2, 7.2),constrained_layout=True)
    title(chart_title)
    if len(y.shape) > 1:
        # Assign rainbow colors; allow x to be either one or two dimensional 
        colors = cm.rainbow(linspace(0, 1, len(y)))[::-1]
        # Reverse plot order
        indices = range(len(y))
        if reverse_order:
            indices = indices[::-1]
        for i in indices:
            yi = y[i]
            if len(array(x).shape) == 2:
                xi = x[i]
            else:
                xi = x
            plot(xi,yi,color = colors[i])
    else:
        plot(x,y)

    if logy: yscale('log')
    if logx: xscale('log')
    xlim(xmin,xmax)
    ylim(ymin,ymax)
    xlabel(x_label)
    ylabel(y_label)
    if legend_show: legend(arange(len(y)))
    grid(True)
    if iplot: show(block=False)
    if pdf is not None: pdf.savefig(chart)
    
def chart_image(image,chart_title='',vmin=None,vmax=None,origin = 'upper',pdf=None,iplot=None,font_size=18):
    from matplotlib.pyplot import figure,title,imshow,cm,colorbar,show,axes
    from matplotlib import rcParams
    rcParams.update({'font.size': font_size})
    chart = figure(figsize=(7.2, 7.2),constrained_layout=True)
    title(chart_title)
    imshow(image, cmap=cm.jet, origin=origin, interpolation='nearest',vmin=vmin,vmax=vmax)
    colorbar(orientation='vertical', pad=0.0, shrink=0.79)
    if iplot: show(block=False)
    if pdf is not None: pdf.savefig(chart)

def chart_image_mask(image,mask,chart_title='',vmin=None,vmax=None,pdf=None,iplot=None,font_size=18):
    from numpy import where
    from matplotlib.pyplot import figure,title,imshow,cm,colorbar,plot,show
    from matplotlib import rcParams
    rcParams.update({'font.size': font_size})
    xy_coordinates = where(mask)
    chart = figure(figsize=(7.2, 7.2),constrained_layout=True)
    title(chart_title)
    imshow(image, cmap=cm.jet, origin='upper', interpolation='nearest',vmin=vmin,vmax=vmax)
    colorbar(orientation='vertical', pad=0.0, shrink=0.79)
    #plot(xy_coordinates[1],xy_coordinates[0],'r+')
    plot(xy_coordinates[1],xy_coordinates[0],'wo',markersize=3)
    if iplot: show(block=False)
    if pdf is not None: pdf.savefig(chart)

def chart_sort_clip(images,clip=2,chart_title = '',pdf=None,iplot=None):
    """Plots sorted pixel intensities after clipping. With clip=2, the two
    smallest and two largest values are clipped from the sorted array before
    plotting."""
    from numpy import sort
    from matplotlib.pyplot import figure,title,plot,show,grid
    if clip>0:
        images_sorted = sort(images,axis=0)[clip:-clip]
    else:
       images_sorted = sort(images,axis=0) 
    chart = figure(figsize=(7.2, 7.2),constrained_layout=True)
    title(chart_title)
    for i in range(images.shape[1]):
        plot(images_sorted[:,i])
    grid(True)
    if iplot: show(block=False)
    if pdf is not None: pdf.savefig(chart)
    
def chart_unsorted_images(images,chart_title = '',pdf=None,iplot=None):
    """Plots pixel intensities."""
    from matplotlib.pyplot import figure,title,plot,show,grid
    chart = figure(figsize=(7.2, 7.2),constrained_layout=True)
    title(chart_title)
    for i in range(images.shape[1]):
        plot(images[:,i])
    grid(True)
    if iplot: show(block=False)
    if pdf is not None: pdf.savefig(chart)
    
def chart_UTsV(qs,UT,s,V,name,logx=None,ms=2,N_vectors=None,font_size=10):
    """Generate charts given qs, UT, s, and V. Uses 'name' in header of charts."""
    from numpy import arange,where,zeros
    from matplotlib.pyplot import figure,title,grid,plot,subplot,semilogx,legend,loglog,xlabel,ylabel,xscale,ylim
    from matplotlib import rcParams
    from cycler import cycler
    rcParams.update({'font.size': font_size})
    rcParams['axes.prop_cycle'] = cycler(color='bgrcmyk')
    name = str(name)
    C_V = (V[:,:-1]*V[:,1:]).sum(axis=1)
    C_UT = (UT[:,:-1]*UT[:,1:]).sum(axis=1)
    # Chart 4 or more UT,V vectors, as determined by s, OR N_s if supplied
    use = zeros(len(C_V),bool)
    use[:-1] = s[:-1]/s[1:] > 1.1
    use[:4] = True
    use[where(use == False)[0][0]:] = False
    try:
        N_s = where(s < 1e-6*s[0])[0][0]-1
    except:
        N_s = len(s)-1
    # use = use[:N_s]
    #use |= C_VT > 0.2

    # use[int(len(use)/2):] = False

    chart = figure(figsize=(8,8))
    subplot(311)
    title(name + '\nSingular Values and V,UT Autocorrelations')

    s_max = s.max()
    ylim(top=2)
    ylim(bottom=s[N_s]/s[0])
    loglog(arange(1,N_s+1),s[:N_s]/s_max,'o')
    # loglog(arange(1,N_s+1)[use],s[:N_s][use]/s_max,'rx')
    legend(['Singular Values (smax = {:0.2f})'.format(s_max)])
    grid(True)
    subplot(312)
    grid(True)
    semilogx(arange(1,N_s+1),C_V[:N_s],'o')
    # semilogx(arange(1,N_s+1)[use],C_V[:N_s][use],'rx')
    legend(['V autocorrelation'])
    grid(True)
    subplot(313)
    grid(True)
    semilogx(arange(1,N_s+1),C_UT[:N_s],'o')
    # semilogx(arange(1,N_s+1)[use],C_UT[:N_s][use],'rx')
    legend(['UT autocorrelation'])
    grid(True)

    if N_vectors is not None:
        use[N_vectors:] = False
    vi = where(use)[0]
    N_charts = use.sum()//4 + (use.sum()%4>0)
    for j in range(N_charts):
        try:
            k = vi[j*4:(j+1)*4]
        except:
            k = vi[j*4:]
        chart = figure(figsize=(8,8))
        subplot(211)
        title(name + '\nUT,V'+str(k))
        plot(qs,UT[k].T,'o',ms=ms)
        if logx: xscale('log')
        #semilogx(qs,U.T[k].T)
        legend(k,ncol=len(k),loc=9,borderpad=0.1,labelspacing=0.1,handletextpad=0.1,columnspacing=1)
        xlabel('q')
        ylabel('UT')
        grid(True)
        subplot(212)
        plot(V[k].T,'o',ms=ms)
        xlabel('Image Number')
        ylabel('V')
        grid(True)